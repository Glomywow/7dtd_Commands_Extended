using System;
using System.Collections.Generic;

namespace AllocsFixes.CustomCommands
{
	public class ListItems : ConsoleCmdAbstract
	{
		public override string GetDescription ()
		{
			return "lists all items that contain the given substring";
		}

		public override string[] GetCommands ()
		{
			return new string[] { "listitems", "li" };
		}

		public override void Execute (List<string> _params, CommandSenderInfo _senderInfo)
		{
			try {
				if (_params.Count != 1 || _params [0].Length == 0) {
					SdtdConsole.Instance.Output  ("Usage: listitems <searchString>");
					SdtdConsole.Instance.Output  ("   or: li <All>");
					return;
				}
				int num = 0;
				if (_params[0].Equals("All")) {
					SdtdConsole.Instance.Output ("Liste des objets de base.");				
					List<string> itemListKFP = new List<string>() { };// ItemBase> ();
					itemListKFP = ItemList.Instance.ItemNames;
					try {
						itemListKFP.Sort();
						for (int i = 0; i < itemListKFP.Count; i ++) {
							if( itemListKFP[i] != null)	{
								SdtdConsole.Instance.Output  (string.Format ("    {0:0000}. {1}", num, itemListKFP[i]));
								num++;  
							}
						} 
					} catch (Exception arg) {
						Log.Out("Error in ListItems.Run.listAll: " + arg);
					}
				} else {
					foreach (string s in ItemList.Instance.ItemNames) {
						if (s.ToLower ().Contains (_params [0].ToLower ())) {
							SdtdConsole.Instance.Output  (string.Format ("    {0:0000}. {1}", num,s));
							num++;
						}
					}
				}
				SdtdConsole.Instance.Output  ("La liste contient " + num + " objets.");
			} catch (Exception e) {
				Log.Out ("Error in ListItems.Run: " + e);
			}
		}
	}
}
